# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # building images for project
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Configure
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credantials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Create API
      - name: Create API image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dnd-item-manager-api
          IMAGE_TAG: ${{ github.sha }}
        # Need to specify docker context because needed projects in parent directory
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./API/Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Create Admin
      - name: Create Admin image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dnd-item-manager-admin
          IMAGE_TAG: ${{ github.sha }}
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./Administration/
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Create Client
      - name: Create Client image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dnd-item-manager-client
          IMAGE_TAG: ${{ github.sha }}
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./Client/
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      # # Create infrastructure
      # - name: Build terraform image
      #   run: docker build -t terra:1.0 ./Terraform/
      # - name: Deploy infrastructure
      #   run: |
      #       docker run \
      #         -e "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" \
      #         -e "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" \
      #         -e "TF_VAR_database_password=${{secrets.SA_PASSWORD}}" \
      #         -d \
      #         --name Terraform \ 
      #         terra:1.0
