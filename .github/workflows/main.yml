# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # building images for project
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create docker network
        run: docker network create -d bridge dnd-network
      # Create DB
      - name: Create db volume
        run: docker volume create sql-item-manage
      - name: Run DB
        run: | 
            docker run \
              -e "ACCEPT_EULA=${{vars.ACCEPT_EULA}}" \
              -e "MSSQL_SA_PASSWORD=${{secrets.SA_PASSWORD}}" \
              -p 1401:1433 \
              -v sql-item-manage:/var/opt/mssql \
              -d \
              --net=dnd-network \
              --name DndItem \
              mcr.microsoft.com/mssql/server
      # Create API
      - name: Create API image
        run: docker build -t net/api:1.0 . -f ./API/Dockerfile
      - name: Run ASP API
        run: | 
            docker run \
              -e "CONNECTION_STRING=${{secrets.CONNECTION_STRING}}" \
              -e "SECRET=${{secrets.SECRET}}" \
              -p 5136:80 \
              -d \
              --net=dnd-network \
              --name MainAPI \
              net/api:1.0
      # Create Client
      - name: Create Client image
        run: docker build -t nginx/client:1.0 ./Client/
      - name: Run client
        run: |
            docker run \
              -p 80:80 \
              -d \
              --net=dnd-network \
              --name Client \
              nginx/client:1.0
  
  infrastructure:
    runs-on: ubuntu-latest
    environment: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build terraform image
        run: docker build -t terra ./Terraform/
      - name: Deploy infrastructure
        run: |
            docker run \
              -e "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" \
              -e "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" \
              -d \
              --name Terraform \ 
              terra
